@page "/export-mock-user"
@using HARbinger.Dialogs;
@using HARbinger.Services;

<style>
    .fullscreen-container {
        display: flex;
        justify-content: center; /* Center horizontally */
        height: 100vh; /* Full viewport height */
        width: 100vw; /* Full viewport width */
    }

    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

<MudPaper Elevation="25">
    <MudToolBar>
        <MudButton 
            OnClick="Back"
            Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.NavigateBefore" Color="Color.Default">Back</MudButton>
        <MudSpacer />
        <MudText>Export User</MudText>
        <MudSpacer />
        <MudButton 
            Disabled="_exportDisabled"
            OnClick="Export"
            Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.NavigateNext" Color="Color.Primary">Export</MudButton>
    </MudToolBar>
</MudPaper>

<div class="fullscreen-container">
    <MudPaper Style="height: 300px; width: 50%; margin-top:16px; padding: 12px;">
        <MudGrid>
            <MudItem xs="12">
                <MudAutocomplete T="string"
                                 ValueChanged="OnUsernameValueChanged"
                                 AdornmentColor="Color.Primary"
                                 AdornmentIcon="@Icons.Material.Filled.Person"
                                 Label="Mock Username"
                                 SearchFunc="@SearchForUsername"
                                 ResetValueOnEmptyText="true" CoerceValue="true" />
            </MudItem>
            
        </MudGrid>
    </MudPaper>
</div>

@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@code {
    private bool _exportDisabled = true;
    private string _mockUsername = string.Empty;
    private List<string> _usernames = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _usernames = Preferences.Default.Get<string>("MockUsers", "").Split(';').ToList();
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/repo-settings");
    }

    private void Export()
    {
        var progress = new Progress<ExportProgress>();
        try
        {
            ExportService.ExportAllGraphMocks(_mockUsername, progress);
            var options = new DialogOptions
                {
                    CloseOnEscapeKey = false,
                    ClassBackground = "my-custom-class",
                    DisableBackdropClick = true,
                    MaxWidth = MaxWidth.Medium,
                };
            var dialogParameters = new DialogParameters();
            dialogParameters.Add("Progress", progress);
            DialogService.Show<ExportDialog>("Exporting", dialogParameters, options);
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            Console.WriteLine(ex.Message);
        }
        finally
        {
            if (!_usernames.Contains(_mockUsername))
            {
                _usernames.Add(_mockUsername);
                Preferences.Default.Set("MockUsers", string.Join(";", _usernames));
            }
        }
    }

    private void OnUsernameUpdated()
    {
        if(!string.IsNullOrWhiteSpace(_mockUsername))
        {
            _exportDisabled = false;
        }
        else
        {
            _exportDisabled = true;
        }
    }

    private void OnUsernameValueChanged(string value)
    {
        _mockUsername = value;
        OnUsernameUpdated();
    }

    private async Task<IEnumerable<string>> SearchForUsername(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _usernames;

        return _usernames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
