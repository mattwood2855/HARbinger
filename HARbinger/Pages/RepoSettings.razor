@page "/repo-settings"

@using HARbinger.Data
@using HARbinger.Services;
@using LibGit2Sharp;

<style>
    .fullscreen-container {
        display: flex;
        justify-content: center; /* Center horizontally */
        height: 100vh; /* Full viewport height */
        width: 100vw; /* Full viewport width */
    }
</style>

<MudPaper Elevation="25">
    <MudToolBar>
        <MudButton 
            OnClick="Back"
            Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.NavigateBefore" Color="Color.Default">Back</MudButton>
        <MudSpacer />
        <MudText>Select Repo To Export To</MudText>
        <MudSpacer />
        <MudButton 
            OnClick="Next"
            Disabled ="@(_repoNameDisabled || _branchDisabled)"
            Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.NavigateNext" Color="Color.Primary">Next</MudButton>
    </MudToolBar>
</MudPaper>


<div class="fullscreen-container">
    <MudPaper Class="" Style="width: 50%; margin-top:16px; padding: 12px;">
        <MudGrid>
            <MudItem xs="12">
                <MudAutocomplete T="string"
                                 ValueChanged="OnRepoDirectoryValueChanged"
                                 AdornmentColor="Color.Primary"
                                 AdornmentIcon="@Icons.Material.Filled.Folder"
                                 Label="Repo Directory" 
                                 SearchFunc="@SearchForRepoDirectory"
                                 ResetValueOnEmptyText="true" CoerceValue="true"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_repoName"
                              Disabled="_repoNameDisabled"
                              Label="Repo" 
                              ReadOnly="true" 
                              Variant="Variant.Text" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_branchName"
                              Disabled="_branchDisabled"
                              Label="Branch" 
                              ReadOnly="true" 
                              Variant="Variant.Text" />
            </MudItem>
        </MudGrid>        
    </MudPaper>
</div>

@inject NavigationManager NavigationManager

@code {
    private string _branchName = string.Empty;  
    private bool _branchDisabled = true;
    private MudForm _form;
    private List<string> _repoDirectories = new List<string>();
    public string RepoDirectory { get; set; } = string.Empty;
    private string _repoName = string.Empty;
    private bool _repoNameDisabled = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _repoDirectories = Preferences.Default.Get<string>("RepoDirectories", "").Split(';').ToList();
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/session-details");
    }

    private void Next()
    {
        NavigationManager.NavigateTo("/export-mock-user");
    }

    private void OnRepoDirectoryUpdated()
    {
        var repoData = RepoService.GetRepoDataForPath(RepoDirectory);
        if (repoData == null)
        {
            _repoName = string.Empty;
            _branchName = string.Empty;
            _repoNameDisabled = true;
            _branchDisabled = true;
            return;
        }
        else
        {
            _repoName = repoData.Name;
            _branchName = repoData.Branch;

            _repoNameDisabled = false;
            _branchDisabled = false;

            if(!_repoDirectories.Contains(RepoDirectory))
            {
                _repoDirectories.Add(RepoDirectory);
                Preferences.Default.Set("RepoDirectories", string.Join(";", _repoDirectories));
            }
        }
    }

    private void OnRepoDirectoryValueChanged(string value)
    {
        RepoDirectory = value;
        OnRepoDirectoryUpdated();
    }

    private async Task<IEnumerable<string>> SearchForRepoDirectory(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _repoDirectories;

        return _repoDirectories.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}