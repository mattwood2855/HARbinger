@page "/"
@using System.Text.Json;
@using HARbinger.Models;
@using HARbinger.Services;

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudPaper Class="d-flex justify-center align-content-center flex-grow1 gap-4">
<MudStack Style="width: 50%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                    OnFilesChanged="OnInputFileChanged"
                    Hidden="@false"
                    InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                    InputStyle="opacity:0"
     @ondragenter="@SetDragClass"
     @ondragleave="@ClearDragClass"
     @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper 
                Height="300px"
                Outlined="true"
                Class="@_dragClass">
                <MudIcon Icon="@Icons.Material.Filled.CloudUpload"></MudIcon>
                    <MudText Typo="Typo.h6">
                     Drag and drop files here or click
                 </MudText>
            </MudPaper>            
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>
</MudPaper>

@code {


    public async void OpenFileAsync()
    {
        var customFileType = new FilePickerFileType(
                new Dictionary<DevicePlatform, IEnumerable<string>>
                    {
                    { DevicePlatform.iOS, new[] { "har" } }, // or general UTType values
                    { DevicePlatform.Android, new[] { "har" } },
                    { DevicePlatform.WinUI, new[] { "har" } },
                    { DevicePlatform.Tizen, new[] { "har" } },
                    { DevicePlatform.macOS, new[] { "har" } }, // or general UTType values
                    });

        PickOptions options = new()
            {
                PickerTitle = "Please select a comic file",
                FileTypes = customFileType,
            };

        var result = await FilePicker.Default.PickAsync(options);
        if(result == null)
        {
            return;
        }
        try
        {
            using (var fileStream = await result.OpenReadAsync())
            {
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception thrown: {ex.Message}");
        }
    }

#nullable enable
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10 d-flex justify-center align-content-center flex-grow-1 gap-4";
    private string _dragClass = DefaultDragClass;

    private async Task Clear()
    {
        ClearDragClass();
        await Task.Delay(100);
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        if(e.File == null)
        {
            return;
        }
        if(await HarFileService.Process(e.File))
        {
            NavigationManager.NavigateTo("/session-details");
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
